package com.example.openCollab.Services;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import com.example.openCollab.Entities.User;
import com.example.openCollab.Repositories.UserRepository;
import com.example.openCollab.WebSecurity.Models.AuthenticationRequest;
import com.example.openCollab.WebSecurity.Models.AuthenticationResponse;
import com.example.openCollab.WebSecurity.Models.RegisterRequest;
import com.example.openCollab.WebSecurity.Models.Role;
import com.example.openCollab.WebSecurity.jwt.JwtAuthenticationFilter;
import com.example.openCollab.WebSecurity.jwt.JwtService;

import jakarta.persistence.Entity;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;


@Component
public class AuthenticateService {

	
	@Autowired
	private JwtService jwtService;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private UserRepository userrepository;
	
	
	
	
	
	public boolean register(RegisterRequest request) throws Exception {
		boolean status=false;
		Role role;
		if(request.getRole().equals("user") || request.getRole().equals("USER") || request.getRole().equals("User")) {
			role=Role.USER;
		}else {
			role=Role.ADMIN;
		}
		if( (userrepository.findByEmail(request.getEmail()) ) || (userrepository.findByPhone(request.getPhone()) ) 
			||	(request.getFirst_name()==null) || (userrepository.findByEmail(request.getEmail()) )){
			return status;
		}
		User user = User.builder()
				.first_name(request.getFirst_name())
				.last_name(request.getLast_name())
				.address(request.getAddress())
				.city(request.getCity())
				.state(request.getState())
				.street(request.getStreet())
				.email(request.email)
				.phone(request.getPhone())
				.password(request.getPassword())
				.role(role)
				.build();
		System.out.println("user created");
		userrepository.save(user);
		
		var jwtToken=jwtService.generateToken(user.getUsername());
		
		return status;
	}

	public AuthenticationResponse authenticate(AuthenticationRequest request) {
		
		User user =userrepository.findByUsername(request.getLogin_id());
		
		
			if(!user.equals(request.getPassword())) {
				throw new BadCredentialsException("Invalid username or password");
			}

            var jwtToken=jwtService.generateToken(user.getUsername());
        	return AuthenticationResponse.builder().token(jwtToken).build();	
	}

}
